
// print map that is passed in by reference myMap
void print(map<string, string> &myMap);

// print map that is passed in by reference myMap
void printd(map<double, double> &myMap);

// convert string time to double time with parameter map
map<double, double> convert_time_to_double(map<string, string> map);

// convert double time  to string time with parameter map
map<string, string> convert_double_to_time(map<double, double> map);

// create a map of available meetings
map<string, string> available_meetings();

int main() function

let map<string,string> meeting_times = meetings time that are available
meeting_times = available_meetings() function

output "The available meetings time are " meeting_times

return 0

void print(map<string,string> myMap) function
    let map<string,string> itr = iterator for myMap
    for each element in myMap
        output key and value

void printd(map<double,double> myMap) function
    let map<double,double> itr = iterator for myMap
    for each element in myMap
        output key and value

map<double, double> convert_time_to_double(map<string, string> map)
    string begin_time = ""
    string end_time = ""
    int position_colon = 0
    int hour = 0
    double minute = 0.0
    double begin = 0.0
    double end = 0.0
    map<string, string> itr
    map<double, double> temp

    for each element in map
        begin_time = itr->first
        for each element in i
            if begin_time.at(i) = :
                position_colon = i
                if position_colon = 1
                    hour = stoi(begin_time.substr(0))
                    minute = stoi(begin_time.substr(2, 2))
                    begin = hour + minute / 60
                else
                    hour = stoi(begin_time.substr(0, 2))
                    minute = stoi(begin_time.substr(3, 2))
                    begin = hour + minute / 60
        end_time = itr->second
        for each element in i
            if end_time.at(i) = :
                position_colon = i
                if position_colon = 1
                    hour = stoi(end_time.substr(0))
                    minute = stoi(end_time.substr(2, 2))
                    end = hour + minute / 60
                else
                    hour = stoi(end_time.substr(0, 2))
                    minute = stoi(end_time.substr(3, 2)
                    end = hour + minute / 60
        temp.insert(pair<double,double>(begin,end))
    return temp

map<string, string> convert_double_to_time(map<double, double> map)
    // declare vairables 
    double begin_time
    double end_time
    int colon
    string hour
    int minute
    string begin
    string end
    // declare iterator and map to use
    map<double, double> itr
    map<string, string> temp
    for each element in map
        begin_time = itr->first
        end_time = itr->second
        begin = to_string(begin_time)
        end = to_string(end_time)
        for each element in  i
            if  begin.at(i) = .
                colon = i
                if colon = 1
                    hour = begin.substr(0)
                    minute = stoi(begin.substr(2, 2))
                    if begin.at(i+1) = 0
                        begin = hour + : + to_string(minute * 6 / 10) + 0
                    else
                        begin = hour + : + to_string(minute * 6 / 10)
                else
                    hour = begin.substr(0, 2)
                    minute = stoi(begin.substr(3, 2))
                    if begin.at(i+1) = 0
                        begin = hour + : + to_string(minute * 6 / 10) + 0
                    else 
                        begin = hour + : + to_string(minute * 6 / 10)
        for each element in i
            if end.at(i) = .
                colon = i
                if colon = 1
                    hour = end.substr(0)
                    minute = stoi(end.substr(2, 2))
                    if end.at(i+1) = 0
                        end = hour + : + to_string(minute * 6 / 10) + 0
                    else 
                        end = hour + : + to_string(minute * 6 / 10)
                else
                    hour = end.substr(0, 2)
                    minute = stoi(end.substr(3, 2))
                    if end.at(i+1) = 0
                        end = hour + : + to_string(minute * 6 / 10) + 0
                    else
                        end = hour + : + to_string(minute * 6 / 10)
        temp.insert(pair<string,string>(begin,end))
    return temp

map<string,string> available_meetings() function

// declare and initialize all maps and meeting duration
    let map<string, string> person1_Schedule = {"7:00", "8:30"}, {"12:00", "13:00"}, {"16:00", "18:00"}
    let map<string, string> person2_Schedule = {"9:00", "10:30"}, {"12:20", "14:30"}, {"14:00", "15:00"}, {"16:00", "17:00"}

    let map<string, string> person1_DailyAct = {"9:00", "19:00"}
    let map<string, string> person2_DailyAct = {"9:00", "18:30"}

    let double duration_of_meeting = 30.0

    map<string, string> meeting_times

    map<double,double> new_person1_Schedule
    new_person1_Schedule = convert_time_to_double(person1_Schedule)
    map<double,double> new_person2_Schedule
    new_person2_Schedule = convert_time_to_double(person2_Schedule)
    map<double,double> new_person1_DailyAct
    new_person1_DailyAct = convert_time_to_double(person1_DailyAct)
    map<double,double> new_person2_DailyAct
    new_person2_DailyAct = convert_time_to_double(person2_DailyAct)

    double min1
    double max1
    double min2
    double max2

    map<double, double>itr1
    map<double, double>itr2

    for each element in new_person1_DailyAct
        min1 = itr1->first
        max1 = itr1->second
    for each element in new_person2_DailyAct
        min2 = itr1->first
        max2 = itr1->second

    if min1 >= min2 then min1 = min2
    if max1 >= max2 then max1 = max2

    map<double,double> person1_available
    map<double,double> person2_available

    for each element in new_person1_Schedule
        for each element in new_person2_Schedule
            double begin1 = itr1->first
            double end1 = itr1->second  
            double begin2 = itr2->first
            double end2 = itr2->second

            auto next1 = next(itr1)
            auto next2 = next(itr2)

            double start1 = next1->first
            double start2 = next2->first

            if itr1 = new_person1_Schedule.begin and end1 < min1 and start1 != min1 
                person1_available.insert(pair<double,double>(min1, start1)     
            if itr2 = new_person2_Schedule.begin and end2 < min1 and start2 != min1
                person2_available.insert(pair<double,double>(min1, start2))       

            if end1 < start1 and begin1 >= min1
                person1_available.insert(pair<double,double>(end1, start1))  
            if end2 < start2 and begin2 >= min1
                person2_available.insert(pair<double,double>(end2, start2))

            if (next1 = new_person1_Schedule.end)
                person1_available.insert(pair<double,double>(end1, max1))   
            if (next2 = new_person2_Schedule.end)
                person2_available.insert(pair<double,double>(end2, max1))    

    map<double,double> overlap_meeting_times

    for each element in person1_available
        for each element in person2_available
            double begin1 = itr1->first
            double end1 = itr1->second
            double begin2 = itr2->first
            double end2 = itr2->second

            if begin1 < end2 and begin2 < end1
                double start = max(begin1, begin2)
                double end = min(end1, end2)
                if end - start >= duration_of_meeting/60
                    overlap_meeting_times.insert(pair<double,double>(start, end))
    meeting_timess = convert_double_to_time(overlap_meeting_times)
    return meeting_times